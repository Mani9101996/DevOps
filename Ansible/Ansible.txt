*******************Ansible*********************

Configuration Management
• Configuration Management
		• It’s a method through which we automate admin tasks.
		• Configuration Management tool turns your code into infrastructure
		• So your code would be Testable, Repeatable & Versionable.
• IT infrastructure refers to the composite of :
		• Software 
		• Network
		• People 
		• Process

• Pain points :
		• Managing user & group accounts
		• Dealing with packages
		• Taking backup
		• Deploying all kinds of applications
		• Configure services
--------------------------------------------------------------------------------------------------
Why Configuration Management Tool?

• Why Configuration Management ?
		• Complete Automation
		• Increase Uptime
		• Improve Performance
		• Ensure Compliance
		• Prevent Errors
		• Reduces Cost
--------------------------------------------------------------------------------------------------
Why Ansible?
• Ansible is an administration tool. What ever system admins (Linux/windows) used to do manually, now we are automating all those tasks by using
	Ansible (Any CM Tool)
• Can use this tool whether your servers are in on-premises or in the cloud.
• It turns your code into infrastructure i.e your computing environment has some of the 
	same attributes as your application:
• Your code is versionable. 
• Your code is repeatable. 
• Your code is testable. 
• You only need to tell what the desired configuration should be, not how to achieve it
• Through automation, get desired state of server.
--------------------------------------------------------------------------------------------------
Install & Configure Ansible(Server)
• Launch Amazon Linux (need not to install ansible in nodes)
• yum install wget -y
• wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
•ls
•yum install epel-release-latest-7.noarch.rpm.1
• sudo yum update -y
• sudo yum install git python python-devel python-pip openssl ansible -y
• ansible --version
• sudo vi /etc/ansible/ansible.cfg & enable the below lines
inventory = /etc/ansible/hosts
sudo_user = root
esc---:---wq---enter

stop all instances and logout.
--------------------------------------------------------------------------------------------------
-----------------------------------04/12/2023-----------------------------------------------------
*Start and login into 3 instances(ansible server,ansible 1 and ansible2)
*ansible --version
*cd /etc/ansible
*ls
*vi /etc/ansible/ansible.cfg
	press i
	remove #(comment)  to default values--->inventory
	remove #(comment)  to default values--->sudo_user
	esc---:---wq---enter
*vi /etc/ansible/hosts
	press i
	typeanywhere creating group-------
		         [webservers]
			 1St IP private DNS address
			 2nd IP private DNS address
	esc---:---wq---enter

Syntax for calling group ---1)group1:group2
			    2)group1[1]:group2[3]
Syntax for calling host  ---1)<groupname>[0]--1st computer/host
			    2)<groupname>[1]--2nd computer/host
			    3)<groupname>[3]--3rd computer/host				
--------------------------------------------------------------------------------------------------
******************Linux system administration steps( to be performed in all computers/instances-->ie:-ansible server,ansible1,ansible2)*****************
*start all instances and login
*useradd <username>
*passwd <username>
	newpassword enter---******
	retype newpassword-- ******
*pwd
*cd /home/ec2-user
*su - ansible(switching from root user to ansible user)
*touch file1
*mkdir dir11
*ls
*yum install httpd -y-----(throws error msg->you need to be root to perform this command)
*sudo yum install httpd -y----(throws msg to enter password -> enter password --> throws err msg(ansible is not in sudoers file.this incident will be reported.)
*exit
*visudo ===>under all root to run anywhere any command
 	press i
	type anywhere below command
		ansible ALL=(ALL)  NOPASSWD: ALL 
		esc---:wq--enter
*su - ansible
*yum install httpd -y-----(throws error msg->you need to be root to perform this command)
*sudo yum install httpd -y-----now the software will be installed.
*stop all instances and log off.

*********************************06-12-2023************************************

*start all instances and login
*sudo su (in all instances)

Note:----SSH connection is default available but it doesnt mean we can connect from server to any host,to connect we need to establish/enable connection)
     ----creation of UN,PW,sudo permission provision, SSH connection to be done by root user in all systems/instances.
     ----delete/remove password step to be donw by ansible user only on ansible server instance.

*su - ansible
*ssh <Host1 IP>  {shortest command to connect ot host instance}
	provide Y/N ---Y ----> throws error msg--permission denied
*exit
*su - ansible
*ssh ansible@<Host1 IP>  {full command to connect to host instance}
 	error msg--permission denied
*exit(back to root ec2-user)
*vi /etc/ssh/sshd_config ---(Note:-we need to modify thabove mentioned file & this process is called establishing connection bw server to all host computers)
	press I
	delete/uncomment # for permit root login
	delete/uncomment # for password authentication
	esc---:wq--enter
*service sshd restart

-------------------Host1 and Host2-------------------------
*vi /etc/ssh/sshd_config ---(Note:-we need to modify thabove mentioned file & this process is called establishing connection bw server to all host computers)
	press I
	delete/uncomment # for permit root login
	delete/uncomment # for password authentication
	esc---:wq--enter
*service sshd restart

-------------------ansible server-------------------------
*su - ansible (same for server and hosts)
*ssh ansible@<Host1 IP>    or    ssh <Host1 IP>
	provide PW:--Ansible1(hidden) and enter ----now connection is enabled and connected to host1
*exit   -----(can be verified for host2 as well)


*ssh <Host1 IP>
	provide PW:--Ansible1(hidden) and enter ----now connection is enabled and connected to host1

*ls
*touch file1(can be verified in host1==> ls)
*mkdir dir1 ( """"")
*yum install tree -y ----throws error( you need to be root to perform this command)
*sudo yum install tree -y ----(can be verified in host1==>which tree)
*exit(back to server)
*exit(back to root)
---------------5thstep----ansible server-------------------------
*ls
*ls -a ===> we can see .ssh folder(can be verified in  all hosts)
*su - ansible 
*ls -a ===> we can see .ssh foldeer in server instance but not in host instances)

Note:- ssh-keygen  ----after executing this command 2 files will be created in .ssh folder ---->1)id_rsa.pub(public file)
												2)id_rsa(private file)
*ls -a
*ls
*ll
*ssh-keygen
	enter file----just press enter
	enter passphrase----- just press enter
	enter repassphrase-----just press enter ----->default file,UN,PW,image will be condidered for these three steps.
*ls -a
*cd .ssh/
*ls
*cat id_rsa
*cat id_rsa.pub

---------------from Server to be performed to all hosts to be sent-------------------
*ssh-copy-id <Host IP>
	provide pW----********* and enter

Note:--PROS:-
	1) while providing common password and username we can connect easily from server to host (ie:--only ssh IP instead of ssh username@IP) 
	2) If common UN used across all PW. removing password can be chance .


*********************************07-12-2023************************************
*start  all instance and login
*sudo su(in server and host)
*su - ansible (in server and host)
*ctrl + l
*ssh 172.31.40.244
*exit(back to server)
*ssh 172.31.38.65
*exit(back to server)
* vi /etc/ansible/hosts
		i+esc+:wq!+enter  or i+esc+:q!+enter    ( to get rid of error msg while coming out of text area
		
*ansible all --list-hosts or ansible webservers --list-hosts====>shows all host ip's
*ansible webservers[1] --list-hosts====>shows 2nd host ip's
*ansible webservers[0] --list-hosts====>shows 1st host ip's
*ansible webservers[-1] --list-hosts====>shows last host ip's
*ansible webservers[-2] --list-hosts====>shows last 2nd host ip's
*ansible webservers:dbservers --list-host====>shows two groups host ip's
*ansible all -a "ls"     or     ansible webservers -a "ls"  ====>shows list of all files and dir present in all hosts 
*ansible webservers -a "ls -a"
*ansible webservers -a "ls /home"
*ansible webservers -a "touch teja123"
*ansible webservers -a "ls"
*ansible webservers -a "touch mani"
*ansible webservers -a "ls"
*ansible webservers -a "which httpd"===>throws error 
*ansible webservers -a "yum install httpd -y"===>throws error
*ansible webservers -a "sudo yum install httpd -y"==> will work
*ansible webservers -a "which httpd"==> throws error (we cannot se sw present in hosts)
*ansible webservers -a "sudo which httpd"   or   ansible webservers -b -a "which httpd"===> will work
*
*ansible webservers -b -a "yum remove httpd -y" ==> will work 
*ansible webservers -b -a "which httpd"===>throws error
*history

We can create code in 3 ways:--1) Ad-hoc commands( simple linux commands)
							   2) Module concept( making one command as module)
							   3) playbooks (>or= 1 module)


*****************Ad-hoc Commands*********************
*ansible webservers  -a "touch teja"===> creating same empty file  means it replacing old file with new file
*ansible webservers  -a "touch gitfile"
*ansible webservers  -a "ls"
*sudo vi /etc/ansible/ansible.cfg
				press i
		--we need to add below text anywhere inthe file
				interpreter_python=auto_silent
				command_warning=False
				esc+:wq and enter

*ansible webservers  -a "touch gitfile"==> no warnings be seen
*ansible webservers  -a "touch devopsfile"==> no warnings be seen
*ansible webservers  -a "touch /tmp/linuxfile"
*ansible webservers  -a "hostname -i"
*ansible webservers  -a "which tree"
*ansible webservers -b -a "yum remove tree -y"  or  ansible webservers -a "yum remove tree -y"  -b
*ansible webservers  -a "which tree"  -b
*ansible webservers -b -a "yum install tree -y"


****************Using Single Module*******************
*ansible webservers -b -m yum -a "pkg = httpd state=present"====> -m means declaring yum as module)

	**after executing is output shows in red coulor====>warnings/error
										yellow colour==>sucessfully executed
										green colour===>already executed
*ansible webservers -b -m yum -a "pkg=httpd state=present"
*ansible webservers  -a "which tree" -b
*ansible webservers -b -m yum -a "pkg=httpd state=present"===>to install
*ansible webservers -b -m yum -a "pkg=httpd state=latest"====>install with latest version
*ansible webservers -b -m yum -a "pkg=httpd state=absent"====>remove software
*ansible webservers -b -m yum -a "pkg=httpd state=present"
*ansible webservers -b  -a "which httpd"
*ansible webservers -b  -a "service httpd status"
*ansible webservers -b -m service -a "name=httpd state=started"====> to start service
*ansible webservers -b -a "service httpd status"
*ansible webservers -b -m service -a "name=httpd state=restarted"=====> to restart service
*ansible webservers -b -m service -a "name=httpd state=stopped"=====> to stop service
*ansible webservers -b -m user -a "name=raj state=present"
*ansible webservers -b -a "cat /etc/passwd"
*ls

Note:  
below are default actions , so we need not to use "state". But for delete we need to use mandetorily.
		user--->create
		pkg---->install
		service->start/stop
		file/dir-->create

*ansible all -a "ls"
*touch xyzfile
*ansible all -a "ls"

**********copying above created file in all hosts*****************
*ansible all -b -m copy -a "src=xyzfile dest=/tmp"===> making copy as module and copying file into hosts instances
*ansible all -a "ls /tmp"
*history
*ansible all -m setup -a "*ipv4*"
*ansible all -m setup -a
*ansible all -m setup
*ansible all -m setup -a "filter=*IPV4*"
*ansible all -b -m yum -a "pkg=git"
*ansible all -a "which git" -b 


****************Playbooks**********************
•Each playbook is composed of one or more ‘modules’ in a list
• Playbooks are divided into many sections like….
	• Target Section - Defines the hosts against which playbooks tasks has to be executed
	• Variable Section - Defines variables
	• Tasks Section - List of all modules that we need to run, in an order

***********************YAML(Yet Ain't Markup Language) Basics***********************
• For Ansible, nearly every YAML file starts with a list
• Each item in the list is a list of key/value pairs, commonly called a "dictionary"
• All YAML files have to begin with "---" and end with "...
• All members of a list lines must begin with same indentation level starting with "- "
--- # A list of tasty fruits
fruits:
- Apple
- Orange
- Strawberry
- Mango
...
• A dictionary is represented in a simple key: value form (the colon must be followed by a space)
--- # An employee record
Employee:
name: SAI
job: DevOps Engineer
skill: Elite
...

***********************Our First Playbook***************************
• All sections begin with "-" & its attributes & parameters beneath it
• Indentation is imp, use only spaces & not tabs
• Create a folder(playbooks) & go inside that(vi test.yml)
• test.yml
--------------------------------------------------------------------------------------
*********************************09-12-2023************************************



*ls
*vi test.yml
		press i
	--- # This is my all playbook
- hosts: webservers
  tasks:
    - name: installing httpd on webservers
      action: yum pkg=httpd state=installed

    - name: installing mysql on dbservers
      action: yum pkg=mysql state=installed
	esc---:wq--enter

*ansible-playbook test.yml(Run ansible-playbook to call the playbook)
*ls
*history

vi target.yml
	press i
--- # This is my all playbook
- hosts: webservers
  tasks:
    - name: installing httpd on webservers
      action: yum pkg=httpd state=installed
	
    - name: installing mysql on dbservers
      action: yum pkg=mysql state=installed
         esc---:wq--enter
*ansible-playbook target.yml(Run ansible-playbook to call the playbook)
*ls
*history
--------------------------------------------------------------------------------------------------
*********************************12-12-2023************************************
*start all instances and login 
*ls 
*vi tasks.yml (server)
		press i 
		--- # My tasks playbook
- hosts: webservers
  user: ansible
  become: yes
  connection: ssh


  tasks:
    - name: installing httpd software in webservers
      action: yum name=httpd state=installed
     
	 esc+:wq and enter  
-----------------------------------
*sudo yum remove httpd -y  (verfying if httpd sw present in host 1 & 2 and if present we are removing)
*which httpd
------------------
*ansible-playbook tasks.yml(Run ansible-playbook to call the playbook)
------------------------------------------------
now editing tasks.yml to handle errors.
*vi tasks.yml
	press i
--- # My tasks playbook
- hosts: webservers
  user: ansible
  become: yes
  connection: ssh


  tasks:
    - name: installing httpd software in webservers
      action: yum name=htt state=installed
      ignore_errors: yes
		
		esc+:wq and enter  

*ansible-playbook tasks.yml(Run ansible-playbook to call the playbook)
 output:------------we are ignoring error in tasks and in play recap we see ignore=1 and failed =0 and ok=2(means server is able to access hosts and trying to install software in hosts)
-------------------------------------------------
*vi create-user.yml
		press i
--- # create user playbook
- name: my test playbook
  hosts: webservers
  become: yes
  connection: ssh
  user: ansible
  gather_facts: yes
  tasks:
    - name: creating a user
      user: name=maniteja1996

		esc+:wq and enter  

*ansible-playbook create-user.yml(Run ansible-playbook to call the playbook)
*ansible-playbook create-user.yml(Run ansible-playbook to call the playbook)
 output:-- all shows in green colour means user already created.(idempotency concept.)
-------------------------------------------------
*ansible webservers -a "tail -1 /etc/passwd" (in server)  or tail -1 /etc/passwd (in host 1 and 2)
*cp create-user.yml create-user-onemore.yml
*vi create-user-onemore.yml
	press i 
--- # create user playbook
- name: my test playbook
  hosts: all
  become: yes
  connection: ssh
  user: ansible
  gather_facts: yes
  tasks:
    - name: creating a user
      user: 
		name: teja1996

		esc+:wq and enter  
		
*ansible-playbook create-user-onemore.yml
output:--in yellow colour means successfully executed.
*-------------------------------------------------
**ansible webservers -a "tail -1 /etc/passwd" (in server)  or tail -1 /etc/passwd (in host 1 and 2)
-------------------------------------------------
*vi create-file.yml
 press i
--- # file creation
- hosts: webservers
  user: ansible
  connection: ssh
  become: yes
  gather_facts: yes


  tasks:
    - name: creating a file
      file:
        path: /home/ansible/allfile
        state: touch
			esc+:wq and enter  

*ansible-playbook create-file.yml
output:--in yellow colour means successfully executed.
*ansible-playbook create-file.yml
output:--in yellow colour means successfully executed.(here we used simple linux commands and linux commands doesnt follow idempotency concept)
-------------------------------------------------
* vim create-dir.yml
	pressi
--- # directory creation
- name: test playbook
  hosts: webservers
  user: ansible
  connection: ssh
  become: yes

  tasks:
    - name: creating a directory
      file:
        path: /home/ansible/abc123xyz
        state: directory
		esc+:wq and enter 

*ansible-playbook create-dir.yml
output:--in yellow colour means successfully executed.(can even verify in host 1 and 2)
-------------------------------------------------
*vi delete-file.yml
      press i
---
- hosts: webservers
  become:  yes
  user: ansible
  connection: ssh

  tasks:
   - name: deleting a file
     file:
       path:  /home/ansible/allfile
       state: absent

	  		esc+:wq and enter 

*ansible-playbook delete-file.yml
output:--in yellow colour means successfully executed.(can even verify in host 1 and 2)
-------------------------------------------------
*vi delete-dir.yml
      press i
---
- hosts: webservers
  become:  yes
  user: ansible
  connection: ssh

  tasks:
   - name: deleting a directory
     file:
       path:  /home/ansible/dir1
       state: absent

	  		esc+:wq and enter 

*ansible-playbook delete-file.yml
output:--in yellow colour means successfully executed.(can even verify in host 1 and 2)
-------------------------------------------------
*vi index.html
	press i
	
	welcome to devops course by mr maniteja.
	esc+:wq and enter 

now copy this file to host 1 and 2 using play book.
* vi copy-file.yml
		press i 
--- # copying a file
- hosts: all
  user: ansible
  become: true
  connection: ssh

  tasks:
    - name: copying a file form server to hosts
      copy:
        src: /home/ansible/index.html
        dest: /home/ansible
        owner: teja1996
	  		esc+:wq and enter 
			
			
*ansible-playbook delete-file.yml
output:--in yellow colour means successfully executed.(can even verify in host 1 and 2)
-------------------------------------------------
*vi install-package.yml
			press i
--- # software installation
- hosts: all
  user: ansible
  become: yes
  connection: ssh

  tasks:
    - name: installing docker software in hosts
      yum:
        name: docker
        state: installed

    - name: installing jenkins software in hosts
      yum:
        name: jenkins
        state: present
	  		esc+:wq and enter 
			
*ansible-playbook install-package.yml
output:--in yellow colour means successfully executed.(can even verify in host 1 and 2)
-------------------------------------------------
*vi remove-package.yml
			press i
--- # uninstalling software 
- hosts: all
  user: ansible
  become: yes
  connection: ssh

  tasks:
    - name: uninstalling docker software in hosts
      yum:
        name: docker
        state: absent
		
	  		esc+:wq and enter 

*ansible-playbook remove-package.yml
output:--in yellow colour means successfully executed.(can even verify in host 1 and 2)
-------------------------------------------------
*		
 press i 
---
- hosts: all




  tasks:
    - name: install a s/w
      yum:
       name: java
       state: latest
	  		
			esc+:q! and enter 
*ansible-playbook install-software.yml
output:--error  FAILED! => {"changed": true, "changes": {"installed": ["java"], "updated": []}, "msg": "You need to be root to perform this command.\n", "rc": 1, "results": ["Loaded plugins: extras_suggestions, langpacks, priorities, update-motd\n"]}


to sovle above error execute below command
*ansible-playbook install-software.yml -b

or edit and add as shown below 

---
- hosts: all
  connection: ssh			(this line to be added optionally)
  user: ansible				(this line to be added optionally)
  become: true             (this line to be added mandetorily)



  tasks:
    - name: install a s/w
      yum:
       name: java
       state: latest

			esc+:wq and enter 

*ansible-playbook install-software.yml
output:-- in yellow colour means successfully executed.(can even verify in host 1 and 2)
-------------------------------------------------
******using variable concept********

*vi variable.yml
	press i
--- # my variable section
- hosts: all
  become: true

  vars:
   pkgname: httpd

  tasks:
   - name: install httpd on webservers
     action: yum name='{{pkgname}}' state=installed

			esc+:wq and enter 
			
*ansible-playbook variable.yml
output:-- in yellow colour means successfully executed.(can even verify in host 1 and 2)
-------------------------------------------------
*vi variables.yml
	press i
---
- hosts: all
  user: ansible
  connection: ssh
  become: yes


  vars:
    user: sunny


  tasks:
    - name: creating a user {user}
      user:
        name: "{{user}}"
		
					esc+:wq and enter 

			
*ansible-playbook variables.yml
output:-- in yellow colour means successfully executed.(can even verify in ansible webservers -a "tail -1 /etc/passwd" in server and tail -1 /etc/passwd in host1&2)
---------------------------------------------------------------------------------------------------------------------------------------------------
*********************************13-12-2023************************************

*start all instances and login through mobaXterm
*sudo su
*su - ansible

====> handlers section
	• Consists the ability to notify when something happens
	• Also call another set of tasks
	
*vi handlers.yml
		press i
--- # my handlers playbook
- hosts: webservers
  name: handlers playbook
  user: ansible
  become: true
  connection: ssh
  gather_facts: yes

  tasks:
    - name: installing httpd software
      action: yum name=httpd state=present
     
    - name: start httpd service
      action: service name=httpd state=started

esc+:wq and enter

*ansible-playbook handlers.yml
output:-- successfully executed

  ---------------------------------------------------------

Now edit the code  by stopping service in 1 and 2 as below

		press i
--- # my handlers playbook
- hosts: webservers
  name: handlers playbook
  user: ansible
  become: true
  connection: ssh
  gather_facts: yes

  tasks:
    - name: installing httpd software
      action: yum name=httpd state=present
      notify: start httpd service

  handlers:
    - name: start httpd service
      action: service name=httpd state=started

esc+:wq and enter

*ansible-playbook handlers.yml
output:-- task 2 didnt executed because task1 is already installed

Now delete software and again execute

*ansible-playbook handlers.yml
output:-- successfully executed
---------------------------------------------------------
====>Dry Run

• Check whether the playbook is formatted correctly
• Test how the playbook is going to behave without running the 
tasks


*ansible-playbook webserver.yml --check

---------------------------------------------------------
*ansible all -a "yum remove httpd -y" -b 

*vi two-tasks.yml
		press i
--- # my two-tasks playbook
- name: my test playbook
  hosts: webservers
  connection: ssh
  become: yes
  user: ansible

  tasks:
    - name: installing package
      yum:
        name: httpd
        state: present

    - name: start service
      service:
          name: httpd
          state: started 
		  
esc+:wq and enter

*ansible-playbook two-tasks.yml
output:-- successfully executed


now edit the code as below 

*vi two-tasks.yml
		press i
--- # my two-tasks playbook
- name: my test playbook
  hosts: webservers
  connection: ssh
  become: yes
  user: ansible

  tasks:
    - name: remove package
      yum:
        name: httpd
        state: absent

    - name: stop service
      service:
          name: httpd
          state: stopped
		  
		  esc+:wq and enter

*ansible-playbook two-tasks.yml
output:-- throws error ==> could not see/find the requested service on 2nd task
---------------------------------------------------------
====> conditionals section
• Few tasks might be needed to execute only on specific scenario
• When statement 
Sometimes you will want to skip a particular step on a particular host

*vi conditionals.yml
       press i
	   
--- # When playbook example
- hosts: all
user: ansible
become: yes
connection: ssh
tasks:
- name: Install apache for debian
command: apt-get -y install apache2
when: ansible_os_family == "Debian"
- name: Install apache for redhat
command: yum -y install httpd
when: ansible_os_family == "RedHat“ 

 esc+:wq and enter

*ansible-playbook conditionals.yml
output:-- we see task1 is skipping because of not matching OS
---------------------------------------------------------
*ansible all -m setup

*vi onemore-conditionals.yml 
 press i 
--- # my onemore-conditionals playbook
- name: conditionals playbook 2
  hosts: webservers
  connection: ssh
  user: ansible
  become: yes
  gather_facts: yes


  tasks:
    - name: install httpd package
      yum:
       name: httpd
       state: installed
      when: ansible_os_family == "RedHat"

    - name: start httpd service
      service:
       name: httpd
       state: started
      when: ansible_os_family == "RedHat"

    - name: install apache2 package
      apt:
       name: apache2
       state: present
      when: ansible_os_family == "Debian"

    - name: start apache2 service
      service:
       name: apache2
       state: started
      when: ansible_os_family == "Debian"

    - name: copy index.html file into hosts
      copy:
       src: /home/ansible/index.html
       dest: /var/www/html
       owner: teja1996
       mode: 0777


 esc+:wq and enter

*ansible all -a "cat /etc/passwd"

delete software in hosts if installed----- sudo yum remove httpd -y 

*ansible-playbook onemore-conditionals.yml
output:-- we see task 3 and 4 are skipping and also copying file in hosts systems( this can be verified by pasting public IPv4 address in google)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
**********************************14-12-2023************************************

======> loops:

• Often you’ll want to do many things in one task, such as create a lot of users, install a lot of 
packages, or repeat a polling step until a certain result is reached


*start all instances and login through mobaXterm
*sudo su
*su - ansible

* vi install-multiple-packages.yml
			press i 
--- # my install-multiple-packages playbook
- hosts: webservers
  name: my loops playbook
  become: yes
  connection: ssh
  user: ansible
  
  tasks:
	- name: install packages
	  yum: 
		name: ['git','httpd','which','docker','tree','wget','java']
		state: present
		
		 esc+:wq and enter
		 
Note:--- remove all mentioned pkgs and execute
	
	*ansible-playbook install-multiple-packages.yml
output:-- success fully executued
------------------------------------------other syntax for the same------------------------------
*vi loops-packages.yml
	press i 
--- # my loops playbook
- hosts: webservers
  name: my loops playbook
  become: yes
  connection: ssh
  user: ansible
  
  tasks:
	- name: installing multiple s/w
	  yum: name='{{item}}' state=installed
	  with_items:
		- httpd
		- git
		- mysql
		- docker 
		- java
		- tree
		
  esc+:wq and enter
		 
	
*ansible-playbook loops-packages.yml
output:-- all shows in green colour as all softwares are already installed.
  Note:--- remove all mentioned pkgs and execute
*ansible-playbook install-multiple-packages.yml
output:-- success fully executued
-----------------------------------------------------------------------------------------------
* vi loops-users.yml
	press i 
--- # Loop Playbook
- hosts: all
  user: ansible
  become: yes
  connection: ssh
  tasks:
   - name: add a list of users
     user: name='{{ item }}' state=present
     with_items:
		- Raj
		- Sai
		- Hari
		
  esc+:wq and enter
		 
	
*ansible-playbook loops-users.yml
output:-- success fully executued

-----------------------------------------------------------------------------------------------
*vi user.yml
	press i 
user1: maniteja
user2: saiteja 
  
  esc+:wq and enter
  
* vi user-vars.yml
	press i 

--- # my user-vars Playbook
- hosts: all
	user: ansible
	become: yes
	connection: ssh
	
	vars_files:
		- user.yml
	
	tasks:
		- name: creating user {{user1}}
		  user: 
		    name: "{{user1}}"
			
		- name: creating user {{user2}}
		  user: 
		    name: "{{user2}}"

esc+:wq and enter
		 
	
*ansible-playbook user-vars.yml
output:-- success fully executued----can verify in hosts by """"cat /etc/passwd""""

-----------------------------------------------------------------------------------------------

=====>>> at the time of executing playbook if we want to change and pkg or name we can use below commands.

*ansible-playbook user-vars.yml -e "user2=raju" -----shortest command

				***********or***********

*ansible-playbook user-vars.yml --extra-vars "user2=raju"   ----full command

-----------------------------------------------------------------------------------------------
*vi sample.yml
press i 
--- # my sample Playbook
- hosts: all
  user: ansible
  become: yes
  connection: ssh
  tasks:
	- name: creating file with ansible playbook
	  file: path=/tmp/teja111file state=touch
	  
	- name: creating folder with ansible playbook
	  file: path=/tmp/teja123folder state=directory
	
	- name: copying a  file to hosts with ansible playbook
	  file: src: ./Adanifile  dest= /home/ansible
	  
	  esc+:wq and enter
		 
	
*ansible-playbook sample.yml
output:-- success fully executued

-----------------------------------------------------------------------------------------------
======> loops:

• Ansible allows keeping sensitive data such as passwords or keys in encrypted files, rather 
than as plaintext in your playbooks

• Creating a new Encrypted playbook (Put ---) (Verify file permissions) (Open playbook now)
ansible-vault create playbook.yml

• Edit the Encrypted playbook
ansible-vault edit playbook.yml

• Change the password
ansible-vault rekey playbook.yml

• Decrypt the playbook & verify by opening playbook
ansible-vault decrypt playbook.yml

• Encrypt an existing playbook (verify by opening playbook)
ansible-vault encrypt playbook.yml

-----------------------------------------------------------------------------------------------
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*



























